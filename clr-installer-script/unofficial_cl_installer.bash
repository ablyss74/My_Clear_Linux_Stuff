#!/usr/bin/env bash


# script_root_directory
working_dir=$HOME
tmpfile=${working_dir}/unofficial_cl_installer_setup

footer(){

source $tmpfile
fone() { echoReply="Some information is needed to input to the installer.

login name for new install:"
}
 
	if [[ ! $REPLY && ! $default_spare_drive ]]; then
   		fone	
	fi
	if [[ ! $REPLY && -e $tmpfile ]]; then 
		echoReply="Setup file found. \`Restart/Install/Quit\`:"
	fi	
	if [[ $REPLY && ! -e $tmpfile ]]; then
		fone
		echo > $tmpfile
	fi
	if [[ $REPLY ]];then
		source $tmpfile
  		if [[ $desktop && $default_spare_drive ]]; then
		    echoReply="If everything looks good type \`install\` else type \`quit\` or \`restart\`:" 
		fi
		if [[ $desktop && -z $default_spare_drive ]]; then
		    echo "default_spare_drive=${REPLY}" >> $tmpfile
		    echoReply="If everything looks good type \`install\` else type \`quit\` or \`restart\`:" 
		fi
	 	if [[ $swapFileSize && -z $desktop ]]; then
	 	   echo "desktop=${REPLY}" >> $tmpfile
	 	   lsblk
	 	   echoReply="Path to spare drive **The entire drive will be erased***\\n\\nInstead of installing to a spare drive type \`skip\` and the installation will stop after the ISO is created\\n\\nso you can test in a virtual machine e.g., /dev/sda, /dev/sdb etc or skip:" 
	 	fi
	        if [[ $timezone && -z $swapFileSize ]]; then
		   echo "swapFileSize=${REPLY}" >> $tmpfile	
		   echoReply="Add XFCE4 Desktop?: yes/no"
	        fi
	 	if [[ $filesystemtype && -z $timezone ]]; then
	 	   echo "timezone=${REPLY}" >> $tmpfile
	 	   echoReply="Swapfile size >= 64:"
	 	fi			
	 	if [[ $username && -z $filesystemtype ]]; then
	 	   echo "filesystemtype=${REPLY}" >> $tmpfile
		   timezone=($(timedatectl))
		   echoReply="Timezone case-sEeNsItIvE, currently set as ${timezone[19]}:"
	 	fi
		if [[ $login && -z $username ]]; then
		   echo "username=${REPLY}" >> $tmpfile
		   echoReply="File System Type \"ext[2,3,4]/xfs/f2fs\":"
		fi
		if [[ -z $login ]]; then
		    echo "login=${REPLY}" >> $tmpfile
		    echo "password=foobar0000" >> $tmpfile
		    echoReply="username for new install:"
		fi
		if [[ ${REPLY,,} == restart ]]; then
		   rm $tmpfile
		   fone
		   echo > $tmpfile
		fi
  		
	fi 
fread=$(< $tmpfile)
echo "${fread}"		
echo -e "\\n\\n\\n\\n\\n$echoReply "
}



main() {
clear
echo -e "                   UnOfficial CL Installer                 \n             https://github.com/ablyss74           \n                     Help:[quit/restart]          \n   \
        \n       \n     \n   \n \n"
footer	
}

while true
	do
		 if [[ ${REPLY,,} == quit ]]; then
			 echo -e "\\n\\nbye!\\n\\n"
		      break	
		 elif [[ ${REPLY,,} == install ]]; then
			 echo -e "\\n\\nInstalling...\\n\\n"


################################################
############## Begin Installation ##############
################################################
#
source $tmpfile
cd $working_dir

[[ ${desktop,,} == no ]] && bundles="[os-core, os-core-update, openssh-server, vim-minimal]"
[[ ${desktop,,} == yes ]] && bundles="[os-core, os-core-update, openssh-server, vim-minimal, flatpak"

echo "Try unmount spare drive and loops:..."
losetup -vD
[[ ${default_spare_drive,,} != skip ]] && umount -v ${default_spare_drive}*


echo "Creating disk image:..."

dd if=/dev/zero of=clearlinux.img bs=12200MB count=1 iflag=fullblock
losetup /dev/loop0 clearlinux.img
echo "
#clear-linux-config
#generated by clr-installer:2.7.6
#generated on: 2023-03-09_05:45:43_UTC
targetMedia:
- name: loop0
  path: /dev/loop0
  majMin: \"7:0\"
  size: \"12000000000\"
  ro: \"false\"
  rm: \"false\"
  type: loop
  children:
  - name: loop0p1
    path: /dev/loop0p1
    majMin: \"259:0\"
    fstype: vfat
    mountpoint: /boot
    size: \"156237824\"
    ro: \"false\"
    rm: \"false\"
    type: part
  - name: loop0p2
    path: /dev/loop0p2
    majMin: \"259:1\"
    fstype: ${filesystemtype} 
    mountpoint: /
    size: \"12000000000\"
    ro: \"false\"
    rm: \"false\"
    type: part
keyboard: us
language: en_US.UTF-8
bundles: ${bundles}
telemetry: false
timezone: ${timezone}" > ./clr-installer.yaml
echo "users: [{login: ${login}, username: ${username}, password: \$6\$HFXfc/WM2yLSduYw\$h5uHV8T.xNxahVZ6kdMMnePHmUyIgZ1EJu5kHHY2x8nCu4GKHmC88vG4IvIbjh6D4SYUYb0/7KS5Jwq54PX7M1,
    admin: true}]" >> ./clr-installer.yaml
echo "kernel: kernel-native
autoUpdate: true
copyNetwork: true
copySwupd: true
keepImage: true
swapFileSize: ${swapFileSize}MiB" >> ./clr-installer.yaml
clr-installer --log-file $working_dir/clr-installer.log -c ./clr-installer.yaml  

### Error checking
until [ -e ./clr-installer.log ]
	do 
	sleep 1s
done
mapfile errors <./clr-installer.log
for i in ${errors[*]}; do 
	if [[ "[ERR]" == "$i" ]]; then
	echo "Oh no, there's an error! Halting installation."
	exit
	fi
done




if [[ ${filesystemtype,,} == xfs ]]; then
echo "xfs_repair post setup:..."
mount -v /dev/loop0p2 
sleep 3s
umount -v /dev/loop0p2
sleep 3s
echo "Trying xfs_repair:..."
xfs_repair /dev/loop0p2
fi

if [[ ${filesystemtype,,} == ext4 ]] || [[ ${filesystemtype,,} == ext3 ]] || [[ ${filesystemtype,,} == ext2 ]]; then
echo "ext4_repair post setup:..."
mount -v /dev/loop0p2
sleep 3s
umount -v /dev/loop0p2
sleep 3s
echo "Trying ext4_repair:..."
e2fsck -f -y -v -C 0 /dev/loop0p2
fi

if [[ ${filesystemtype,,} == f2fs ]]; then
echo "ext4_repair post setup:..."
mount -v /dev/loop0p2
sleep 3s
umount -v /dev/loop0p2
sleep 3s
echo "Trying ext4_repair:..."
fsck.f2fs -f -a /dev/loop0p2
fi



mount -v /dev/loop0p2 /mnt/
echo "This file contains useful commands." >> /mnt/home/${login}/Readme
echo "For desktop stuff ... sudo swupd bundle-add os-utils-gui --skip-optional" >> /mnt/home/${login}/Readme
echo "Followed by... startx to start xfce session" >> /mnt/home/${login}/Readme
echo "For flatpak stuff ... sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo" >> /mnt/home/${login}/Readme
echo "Add web browser, mpv video player etc.. via flatpak." >> /mnt/home/${login}/Readme
echo "FYI, check updates regularly with flatpak update -y." >> /mnt/home/${login}/Readme
umount -v /mnt


if [[ ${default_spare_drive,,} != skip ]]; then 
echo "Writing image file to default_spare_drive:..."
dd if=./clearlinux.img of=${default_spare_drive} oflag=sync bs=4M status=progress


if [[ ${filesystemtype,,} == xfs ]]; then
echo "xfs_repair post setup:..."
mount -v ${default_spare_drive}2 
sleep 3s
umount -v ${default_spare_drive}2
sleep 3s
echo "Trying xfs_repair:..."
xfs_repair ${default_spare_drive}2
fi

if [[ ${filesystemtype,,} == ext4 ]] || [[ ${filesystemtype,,} == ext3 ]] || [[ ${filesystemtype,,} == ext2 ]]; then
echo "ext4_repair post setup:..."
mount -v ${default_spare_drive}2 
sleep 3s
umount -v ${default_spare_drive}2
sleep 3s
echo "Trying ext4_repair:..."
e2fsck -f -y -v -C 0 ${default_spare_drive}2
fi

if [[ ${filesystemtype,,} == f2fs ]]; then
echo "ext4_repair post setup:..."
mount -v ${default_spare_drive}2 
sleep 3s
umount -v ${default_spare_drive}2
sleep 3s
echo "Trying ext4_repair:..."
fsck.f2fs -f -a ${default_spare_drive}2
fi
echo "Now would be a good time to run gparted to resize the new disk image if necessary."
echo "To boot in to the new system use the BIOS UEFI boot menu."


fi

echo ""
echo "Cleaning up..."
# Clean up
cd $working_dir
umount -v ${default_spare_drive}*
losetup -vD
 
echo "Not deleting clearlinux.img Please delete manually."
 
rm -v pre-install-clr-installer.yaml
rm -v clr-installer.yaml
rm -v clr-installer.log
#rm -v $tmpfile
echo "ISO Created." 
[[ ${default_spare_drive,,} == skip ]] && echo "Skipped write to spare drive."
echo "Bye!"
	break	
		  else
		  	read -r -p "$(main)" 
		 fi	 
	done
